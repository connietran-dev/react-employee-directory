{"version":3,"sources":["logo.svg","components/EmployeeCard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EmployeeCard","props","className","firstName","lastName","title","salary","dept","manager","App","useState","employeesArray","employees","setEmployees","Container","maxWidth","ButtonGroup","color","aria-label","Button","onClick","sortEmployees","sort","a","b","fa","first_name","toLowerCase","fb","last_name","map","employee","key","id","department","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.56c2d085.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './style.css';\n\nfunction EmployeeCard(props) {\n  return (\n    <div className=\"card\">\n      <div className=\"img-container d-flex align-items-center justify-content-center\">\n        {/* <img alt={props.firstName} src={props.image} /> */}\n        <h1>{props.firstName} {props.lastName}</h1>\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>First Name:</strong> {props.firstName} {props.lastName}\n          </li>\n          <li>\n            <strong>Title:</strong> {props.title}\n          </li>\n          <li>\n            <strong>Salary:</strong> {props.salary}\n          </li>\n          <li>\n            <strong>Department:</strong> {props.dept}\n          </li>\n          <li>\n            <strong>Manager:</strong> {props.manager}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default EmployeeCard;\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport Container from '@material-ui/core/Container';\n\nimport EmployeeCard from \"./components/EmployeeCard\";\nimport employeesArray from \"./employees.json\";\n\nfunction App() {\n  const [employees, setEmployees] = useState(employeesArray);\n\n  function sortFirstName() {\n    let sortEmployees = employees.sort((a, b) => {\n      let fa = a.first_name.toLowerCase(),\n        fb = b.first_name.toLowerCase();\n\n      if (fa < fb) {\n        return -1;\n      }\n      if (fa > fb) {\n        return 1;\n      }\n      return 0;\n    });\n\n    // setEmployees takes previous state value and changed state value\n    setEmployees(...employees, sortEmployees);\n  };\n\n  function sortLastName() {\n    let sortEmployees = employees.sort((a, b) => {\n      let fa = a.last_name.toLowerCase(),\n        fb = b.last_name.toLowerCase();\n\n      if (fa < fb) {\n        return -1;\n      }\n      if (fa > fb) {\n        return 1;\n      }\n      return 0;\n    });\n\n    // setEmployees takes previous state value and changed state value\n    setEmployees(...employees, sortEmployees);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <Container maxWidth=\"sm\">\n        <h1 className=\"title\">Employee Directory</h1>\n      </Container>\n      <Container maxWidth=\"sm\">\n        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n          <Button onClick={sortFirstName} >\n            Sort by First Name\n          </Button>\n          <Button onClick={sortLastName} >\n            Sort by Last Name\n            </Button>\n        </ButtonGroup>\n      </Container>\n      {\n        employeesArray.map(employee =>\n          <EmployeeCard\n            key={employee.id}\n            firstName={employee.first_name}\n            lastName={employee.last_name}\n            title={employee.title}\n            salary={employee.salary}\n            dept={employee.department}\n            manager={employee.manager}\n          />)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}